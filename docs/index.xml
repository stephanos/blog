<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>This Programming Life</title>
    <link>https://blog.stephanbehnke.com/</link>
    <description>Recent content on This Programming Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Nov 2017 17:54:31 +0000</lastBuildDate>
    
	<atom:link href="https://blog.stephanbehnke.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I Learned to Stop Worrying and Love the Job Hunt</title>
      <link>https://blog.stephanbehnke.com/how-i-learned-to-stop-worrying-and-love-the-job-hunt-in-toronto/</link>
      <pubDate>Sat, 11 Nov 2017 17:54:31 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/how-i-learned-to-stop-worrying-and-love-the-job-hunt-in-toronto/</guid>
      <description>This is a story about finding a job as a senior software engineer in Toronto - with a twist: just having moved there from Germany.
I was prepared. I had a plan. But it failed completely - at first. I had to adapt and learn. It was a roller coaster ride.
I tell my story because it might help others learn from my mistakes. This is not meant as a bigger statement about immigration or the state of the tech scene.</description>
    </item>
    
    <item>
      <title>26 Lessons From Being a Developer at a Startup</title>
      <link>https://blog.stephanbehnke.com/26-lessons-from-being-a-developer-at-a-startup/</link>
      <pubDate>Mon, 10 Apr 2017 21:06:39 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/26-lessons-from-being-a-developer-at-a-startup/</guid>
      <description>In the last three years, I worked for a small B2B startup in Berlin. I was the first backend developer and joined the ride of growing it from 200 to 720 business customers, from $200K to $3.2M annual revenue and from 5 to 25 employees.
The following lessons are a very simplistic, personal summary of what I have learned during that time. Nothing more, nothing less. Enjoy.
(1) Retrospectives are crucial.</description>
    </item>
    
    <item>
      <title>3 years on Google App Engine. An Epic Review.</title>
      <link>https://blog.stephanbehnke.com/3-years-on-google-app-engine-an-epic-review/</link>
      <pubDate>Mon, 13 Mar 2017 15:23:59 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/3-years-on-google-app-engine-an-epic-review/</guid>
      <description>For the last 3 years I worked on an application that runs on Google App Engine. It is a fascinating, unique piece of service Google is offering here. Unlike anything you&amp;rsquo;ll find elsewhere. This is my in-depth, personal take on it.
Google&amp;rsquo;s Cloud (est. 2008) First of all, what is Google App Engine (GAE) actually? It is a platform to run your web applications on. Like Heroku. But different when you look closer.</description>
    </item>
    
    <item>
      <title>The Curious Case of the Merciless Compiler</title>
      <link>https://blog.stephanbehnke.com/the-curious-case-of-the-merciless-compiler/</link>
      <pubDate>Sun, 07 Aug 2016 15:43:23 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/the-curious-case-of-the-merciless-compiler/</guid>
      <description>In the movie 2001: A Space Odyssey the computer program HAL 9000 goes rogue, showing no mercy towards the space ship&amp;rsquo;s crew. That&amp;rsquo;s exactly how newcomers to the Go programming language must feel.
Since its introduction in 2009, the language has produced gigabytes worth of online debate about its very opinionated philosophy. Since it is a statically-compiled language, it has a compiler. And just like HAL the Go compiler is quite stubborn and - dare I say - merciless.</description>
    </item>
    
    <item>
      <title>The hunt for an immutable, type safe data record in JavaScript</title>
      <link>https://blog.stephanbehnke.com/hunt-for-immutable-type-safe-record-in-javascript/</link>
      <pubDate>Sun, 06 Mar 2016 15:29:39 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/hunt-for-immutable-type-safe-record-in-javascript/</guid>
      <description>Ever since working with Scala&amp;rsquo;s case classes I was hooked on the idea of having a type safe data record that was also immutable. What&amp;rsquo;s not to like? It&amp;rsquo;s type safe and immutable (duh). So I wanted to see if I can get the same thing in JavaScript - the most mutable and dynamic language known to man.
class Person { givenName; familyName; } This will serve as our starting point: a simple class in JavaScript.</description>
    </item>
    
    <item>
      <title>Zero to Om - Act 6</title>
      <link>https://blog.stephanbehnke.com/zero-to-om-6/</link>
      <pubDate>Sun, 09 Nov 2014 18:00:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om-6/</guid>
      <description>Welcome to our next act. Today we&amp;rsquo;re going to meet a few additional libraries that&amp;rsquo;ll help us write great Om applications. Let&amp;rsquo;s get started!
As always, I strongly recommend reading the previous post first if you haven&amp;rsquo;t done so already.
sablono In a previous post I showed you how the application&amp;rsquo;s UI is rendered:
(dom/div nil (header) (dom/input #js {:id &amp;quot;new-todo&amp;quot; :ref &amp;quot;newField&amp;quot; :placeholder &amp;quot;What needs to be done?&amp;quot; :onKeyDown #(enter-new-todo % state owner)}) (listing state) (footer state))))) As you can see, a dom/* HTML element receives a map of properties: #js {.</description>
    </item>
    
    <item>
      <title>Zero to Om - Act 5</title>
      <link>https://blog.stephanbehnke.com/zero-to-om-act-5/</link>
      <pubDate>Thu, 25 Sep 2014 12:51:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om-act-5/</guid>
      <description>In this part we will have a closer look at the app&amp;rsquo;s build configuration and discover what it can do for us. The source code can be found on GitHub.
Note: I strongly recommend reading the previous post first if you haven&amp;rsquo;t done so already.
The Build Config The project&amp;rsquo;s build configuration is defined in project.clj. It is written in Clojure and looks like this:
;; project.clj, part 1 (defproject todomvc &amp;quot;0.</description>
    </item>
    
    <item>
      <title>Zero to Om - Act 4</title>
      <link>https://blog.stephanbehnke.com/zero-to-om-act-4/</link>
      <pubDate>Thu, 18 Sep 2014 08:57:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om-act-4/</guid>
      <description>Until now the application is rather boring. It just displays data. But we want to actually use it! In this post we will take a look at how the app reacts (no pun intented) to user input. The source code can be found on GitHub.
Note: I strongly recommend reading the previous post first if you haven&amp;rsquo;t done so already.
Managing state is tricky. Each framework has its own mechanisms to detect and handle state changes.</description>
    </item>
    
    <item>
      <title>Zero to Om - Act 3</title>
      <link>https://blog.stephanbehnke.com/zero-to-om-act-3/</link>
      <pubDate>Thu, 11 Sep 2014 17:08:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om-act-3/</guid>
      <description>In this third post we&amp;rsquo;ll take a look at how the app is initialized and rendered. The source code can be found on GitHub.
Note: I strongly recommend reading the previous post first if you haven&amp;rsquo;t done so already.
For increased comprehension we will jump through the two files and not go through them from top to bottom.
The State Most applications, at least the interesting ones, have some kind of state.</description>
    </item>
    
    <item>
      <title>Zero to Om - Act 2</title>
      <link>https://blog.stephanbehnke.com/zero-to-om-act-2/</link>
      <pubDate>Thu, 04 Sep 2014 05:18:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om-act-2/</guid>
      <description>In this second post we will look at actual ClojureScript source code, step by step. The source code can be found on GitHub.
Note: I strongly recommend reading the previous post first if you haven&amp;rsquo;t done so already.
ClojureScript 101 Before we dive in we&amp;rsquo;ll look at the philosophy of ClojureScript.
Since ClojureScript is a Lisp dialect, it strips away most of the syntax you may know from other programming languages.</description>
    </item>
    
    <item>
      <title>Zero to Om</title>
      <link>https://blog.stephanbehnke.com/zero-to-om/</link>
      <pubDate>Mon, 25 Aug 2014 15:41:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/zero-to-om/</guid>
      <description>This is the first part of a series of blog posts about Om. If you don&amp;rsquo;t know anything about Om, don&amp;rsquo;t worry! You&amp;rsquo;ll learn everything step by step. Here are the basics: Om is a ClojureScript interface to Facebook&amp;rsquo;s React. If that doesn&amp;rsquo;t ring any bells, again, don&amp;rsquo;t worry!
NOTE: I just started learning React.js, ClojureScript and Om. So this is my way of trying to learn this myself: By taking you on the ride with me.</description>
    </item>
    
    <item>
      <title>Talk at BedCon 2014</title>
      <link>https://blog.stephanbehnke.com/talk-bedcon-2014-golang/</link>
      <pubDate>Fri, 04 Apr 2014 20:00:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/talk-bedcon-2014-golang/</guid>
      <description>Today I gave a talk at the BedCon here in Berlin. It introduced the audience to the fairly new programming language Go, created by Google. The room was packed, some people had to actually stand in the back.
In case you missed it, here are my slides.</description>
    </item>
    
    <item>
      <title>Scala Macros Use Case: Teaching Scala</title>
      <link>https://blog.stephanbehnke.com/scala-macros-use-case-teaching-scala/</link>
      <pubDate>Mon, 28 Jan 2013 11:00:00 +0000</pubDate>
      
      <guid>https://blog.stephanbehnke.com/scala-macros-use-case-teaching-scala/</guid>
      <description>The brand new experimental macro feature in Scala 2.10 can be used in many interesting ways:
 writing concise test cases, generating serialization code inlining methods  This article shows exciting new possibilities it opens up for teaching Scala. To quote one student: &amp;ldquo;This is so awesome &amp;hellip; and fun!&amp;rdquo;.
Exercises are a crucial part of the &amp;ldquo;Introduction to Scala&amp;rdquo; training course I developed for German-speaking software engineers. Nobody wants to listen to someone else&amp;rsquo;s dialog for 8 hours - they want to get a feeling for the new language, try out the new syntax, play around with new features.</description>
    </item>
    
  </channel>
</rss>